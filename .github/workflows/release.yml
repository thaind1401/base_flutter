name: Release & Deploy

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production

env:
  FLUTTER_VERSION: '3.32.8'
  MELOS_VERSION: '6.3.0'

jobs:
  release:
    name: 🚀 Release Build & Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 45
    # Only run for tags pushed from main branch
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref_type == 'tag' && github.event.base_ref == 'refs/heads/main')
    
    steps:
      - name: 📚 Checkout repository
        uses: actions/checkout@v4
        with:
          path: .

      - name: 🧹 Remove Flutter/Dart lock files
        run: |
          rm -f $HOME/.flutter_tool_state
          rm -f $HOME/.dart_tool/flutter_lock
          echo "Lock files removed."
      - name: 🏷️ Get version from tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            ENVIRONMENT="production"
          else
            VERSION=$(date '+%Y.%m.%d')-${{ github.run_number }}
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "📱 Building version: $VERSION for $ENVIRONMENT"

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: 🔧 Set environment variables
        run: |
          echo "Setting up environment variables for CI..."
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
          echo "Current JAVA_HOME: $JAVA_HOME"
          echo "Current ANDROID_HOME: $ANDROID_HOME"
          java -version

      - name: 🎯 Setup Dart & Melos
        run: |
          dart pub global activate melos ${{ env.MELOS_VERSION }}
          echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: 📦 Bootstrap dependencies
        run: make sync

      - name: 🌍 Generate environment files
        run: make gen_env

      - name: 🚮 Remove generated files (prevent build_runner conflicts)
        run: |
          rm -f app/lib/resource/generated/assets.gen.dart
          rm -f app/lib/navigation/routes/app_router.gr.dart

      - name: � Generate code with build_runner
        run: make build_all

      - name:  Setup Android signing
        run: |
          echo "Creating local.properties file for Android signing..."
          echo "sdk.dir=$ANDROID_HOME" > app/android/local.properties
          echo "flutter.sdk=$FLUTTER_ROOT" >> app/android/local.properties
          echo "keystore.storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" >> app/android/local.properties
          echo "keystore.keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> app/android/local.properties
          echo "keystore.keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> app/android/local.properties
          echo "keystore.storeFile=release.jks" >> app/android/local.properties
          
          echo "Creating keystore file (.jks format)..."
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > app/android/app/release.jks
          
          echo "Verifying setup..."
          echo "local.properties content:"
          cat app/android/local.properties
          echo "Keystore file:"
          ls -la app/android/app/release.jks
          echo "Environment variables:"
          echo "  ANDROID_HOME: $ANDROID_HOME"
          echo "  FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "  JAVA_HOME: $JAVA_HOME"

      - name: 🧪 Run tests
        run: make test

      # Setup Fastlane for iOS build/deploy
      - name: Install dependencies for Fastlane
        run: |
          sudo gem install bundler
          cd app/ios && bundle install || true

      # Setup iOS certificate and provisioning profile from secrets
      - name: Setup iOS certificate
        run: |
          mkdir -p app/ios/certs
          echo "$IOS_CERTIFICATE" | base64 --decode > app/ios/certs/cert.p12
        env:
          IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}

      - name: Setup iOS provisioning profile
        run: |
          mkdir -p app/ios/profiles
          echo "$IOS_PROVISIONING_PROFILE" | base64 --decode > app/ios/profiles/profile.mobileprovision
        env:
          IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }}

      # Setup Fastlane App Store Connect API Key
      - name: Setup App Store Connect API Key
        run: |
          mkdir -p app/ios
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" > app/ios/AuthKey.p8
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

      # Ensure production.env exists (from secret)
      - name: Ensure production.env exists (from secret)
        run: |
          mkdir -p env
          echo "$PRODUCTION_ENV" > env/production.env
        env:
          PRODUCTION_ENV: ${{ secrets.PRODUCTION_ENV }}

      # Build and distribute iOS app with Fastlane
      - name: Build & distribute iOS app with Fastlane
        run: |
          cd app/ios
          bundle exec fastlane ios release \
            --cert_path=certs/cert.p12 \
            --profile_path=profiles/profile.mobileprovision \
            --api_key_path=AuthKey.p8
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

      - name: Setup App Store Connect API Key
        run: |
          mkdir -p app/ios
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" > app/ios/AuthKey.p8
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

      - name: Ensure production.env exists (from secret)
        run: |
          mkdir -p env
          echo "$PRODUCTION_ENV" > env/production.env
        env:
          PRODUCTION_ENV: ${{ secrets.PRODUCTION_ENV }}

      - name: Build iOS app with Fastlane
        run: |
          cd app/ios
          bundle exec fastlane build
        env:
          APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

      - name: 🔨 Build Android Release (Production)
        run: |
          echo "🧹 Cleaning gradle cache and build artifacts..."
          cd app && flutter clean
          
          echo "🔍 Checking gradle wrapper..."
          if [ -f "android/gradlew" ]; then
            echo "✅ Found gradlew, cleaning gradle cache..."
            
            # Clean gradle properties that might conflict with CI environment
            echo "🧹 Cleaning gradle user properties..."
            rm -f ~/.gradle/gradle.properties
            
            # Java home is automatically set by actions/setup-java@v4
            echo "☕ Using Java home: $JAVA_HOME"
            
            cd android && chmod +x gradlew && ./gradlew clean && cd ..
          else
            echo "⚠️  gradlew not found, skipping gradle clean"
          fi
          
          cd ..
          echo "🔨 Building production App Bundle..."
          make build_prod_bundle

      - name: 📤 Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: app-bundle-${{ steps.version.outputs.environment }}-${{ steps.version.outputs.version }}
          path: app/build/app/outputs/bundle/*Release/*.aab
          retention-days: 90

      - name: 📝 Create GitHub Release
        if: github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ steps.version.outputs.version }}" \
            --notes "## 📱 Release ${{ steps.version.outputs.version }}

          ### 🚀 What's New
          - Built with Flutter ${{ env.FLUTTER_VERSION }}
          - Environment: ${{ steps.version.outputs.environment }}
          - Build number: ${{ github.run_number }}

          ### 📦 Artifacts
          - Android App Bundle (AAB)
          - Built for ${{ steps.version.outputs.environment }} environment

          ### 🔧 Technical Details
          - Commit: ${{ github.sha }}
          - Build time: ${{ github.event.head_commit.timestamp }}" \
            ./app/build/app/outputs/bundle/*Release/*.aab

      - name: 🚀 Deploy Notification
        run: |
          echo "🎉 Release ${{ steps.version.outputs.version }} built successfully!"
          echo "📦 Environment: ${{ steps.version.outputs.environment }}"
          echo "🔗 Artifacts are ready for distribution"